    We are at: https://etherpad.mozilla.org/yDXLJhmLi6

Link to github pages: https://github.com/swcarpentry/boot-camps
go to the tab "Branches" and click 2013-05-lbl
Thursday morning, we were in the folder "shell"

To get our material:
git clone -b 2013-05-lbl https://github.com/swcarpentry/boot-camps.git

Minute cards form:

https://docs.google.com/forms/d/18LDYW9stU-Vj_FAu5r-LGJAehFHb8EAI-_GVeamzCTU/

We're on Twitter (Talk about us!)
@swcarpentry
@jiffyclub - Matt Davis
@tracykteal - Tracy Teal

Day 1 Etherpad content is now part of the 2013-05-lbl repo:
https://github.com/swcarpentry/boot-camps/tree/2013-05-lbl/etherpad

Python Tutorial from the official docs:
http://docs.python.org/2/tutorial/index.html



Find iPython notebooks on github for tutorials


At the shell:
Go to boot-camps/python/intro

Copy the iPythonNotebook to your own version, so Azalee's changes and your changes don't conflict
    cp StudentNotes_lbnl.ipynb mynotes.ipynb

Then open your iPythonNotebook
    ipython notebook mynotes.ipynb 

Shift+enter will execute the commands
    
Shell commands work in iPython which is awesome!

iPython seems to have problems executing shell commands after a comment
# talk with Fernando?

Python has integers and float values
If you enter just integers, with no decimal points, like 42/9 Python assumes you want integers back and won't give you decimals.  If you explicitily want this behavior, it's good practice to show that you want this and use 42//9
If you want to use decimals put a decimal in your equation, like
  42./9
If you want it rounded, you can use 
round(42./9)

To add a cell to do a calculation or code, use the arrow keys at the top of the iPythonNotebook
If you hover over the icons, they say what they do.

When you get an error in Python, typically you can read through it.  It provides helpful advice on what the error is.

If you have multiple lines with calculations and then hit Shift+Enter, it will just evaluate the last line.
Example
3+2
4+9
4*4
will return 16

Assigning variables gets around this
a = 10
a
will return 10

In Python each command is generally one line

Containers

Lists
A list always has square brackets

Python is zero-indexed.  That means that counting starts with zero.  So the third item in your list is referred to as list[2]
When you're taking a range of items in Python, called slicing, the range will include the first and exclude the last.
Including the idea that counting starts with zero

list[2:4] will include the third and fourth item in the list

If you want just every two items for example, you can use the syntax
start:end:by
list[0:10:2] will return every other item, starting with the first, so the 1st, 3rd, 5th, 7th, 9th items

If you want just the 3rd and 7th for instance, you would need to do that separately
list[2], list[6]

Tuples
Tuples are different from lists, because they are immutable.  Items in the list cannot be changed.

If you're assigning items from a tuple to variables, or unpacking them, you need to have the same number of variables as number of items in the tuple

my_tup = (1,2,3,4)
my_tup has 4 items in it, so 
a,b,c,d = my_tup   works
a,b,c = my_tup      doesn't work

Dictionaries
You can't reference things by value.  The items in a dictionary are not stored in any particular order.  The only way you can reference things is by using the key value, the value before the colon.

The only container that can be used as a key is a tuple, because it's immutable
Also, variables can be used as keys


Someone asked:
"Can you clarify the difference between these:

python
ipython
IP[y] Notebook

And when do you use what?"

Python is the programming languange
iPython is an interactive shell for Python.  So you can type something and run it immediately to see if it works.  Otherwise you write some Python code in a text editor, save it and then run the set of Python code.
iPython notebook is web-based interactive environment.  In it you can combine comments, code and even figure output.  You'll see more of that as we go on.

You can decide when to use what.  If you're writing a bit Python program, you'd likely just use a text editor and run all the code at once.
If you want to try things out to see if they'll work or do what you expect, you might use iPython or iPythonNotebook
iPythonNotebook is especially good for combining input and output and sharing information with others.  It's nice that you can save both the code and the output of your analysis together.

Looping over a list:

for thing in list_of_things:
    do stuff with thing

for i in range(len(list_of_things)):
    thing = list_of_things[i]

Good coding practices transend Python.  You can and should use them in whatever language you're working in.  Additionally things like if statements and for loops are available in most languages, along with writing functions.

Using docstrings is another good and important good coding practice.  It helps others know how to use the code and you to remember how things work when you come back to it.

Testing:
Easy to make mistakes
How do youi know your code is right?
 * visual inspection
   * can be tedious
   * hard with complicated code
 * create automatic tests
   * nose testing:
     * automatically runs any function which begins with the word test and reports the number of errors

Good coding practices:
 * Write code in one place and reuse it rather than copying and pasting it over and over
 * Can write general purpose units of code which can be combined different ways to create different outcomes
 * print an error when something breaks (silence is good)
 * functions contain logically grouped code
 * test functions should contain tests of a single functionality of the code
   * you will only see the first error encountered
 * Test drive development:
   * write code interface
   * write doc string
   * write tests
   * write function to pass tests
 * Write code that works first, then make is fast, fancy, etc
 * try not to build assuptions about the final goal of your specific project into your functions


Testing

Go to http://198.128.201.89:8888 in a web browser to see the notebook that Matt is using
You'll need to reload it to see new things that he's adding

Function from Notebook:

def calc_mean(ilist):
    '''
    returns the mean of input list
    '''
    total = 0.0
    for num in ilist:
        total = total + num
    return total/float(len(ilist))


For testing with nose, to get nose to recognize something as a test, the function should start with 'test', like

test_mean_calc

Then within the test function, use assert statements to make the function fail if the test doesn't work, then the nose test will fail

nose can be used for testing, and there are also nose tools that you can use.  To get these use

import nose.tools as nt

You can write tests before you even write the code, because you should be able to define what your code is supposed to do

PYTHONPATH - where python looks for files and modules



Resources:
 * In class materials: git pull origin 2013-05-lbl on Monday to get the instructor class notes and final etherpads
 * SWC information http://software-carpentry.org/index.html:
   * lessons
   * office hours: http://software-carpentry.org/bootcamps/office-hours.html
   * interested in becoming an instructor? info@software-carpentry.org
 * Contact:
   * instructors:
     * Azalee Bostroem: abostroem@gmail.com
     * Tracy Teal: tkteal@gmail.com
     * Matt Davis: jiffyclub@gmail.com
   * info@software-carpentry.org  (this will not go to the instructors)
 * Cait will contact you with a post-assessment. Please fill it out - help make future SWC better
 * Create a local group and/or local mailing list

Email addresss form
https://docs.google.com/forms/d/1H55xXlD3mVmPDp5NCLtbOq2OK37M27Gd5IRw06tkdLk/viewform


 * Python Boot Camp here at Berkeley in the Fall
        https://sites.google.com/site/pythonbootcamp/home

Some books on Scientific Computing in Python

Learning IPython for Interactive Computing and Data Visualization
by Cyrille Rossant
http://www.packtpub.com/learning-ipython-for-interactive-computing-and-data-visualization/book

Python for Data Analysis
by Wes McKinney
http://shop.oreilly.com/product/0636920023784.do

SciPy and NumPy
Eli Bressert
http://shop.oreilly.com/product/0636920020219.do

